"""
Handles advanced signal processing, including confidence modeling and filtering.
"""
import numpy as np
from pykalman import KalmanFilter
from sklearn.linear_model import LogisticRegression
from sklearn.calibration import CalibratedClassifierCV
import pandas as pd

def smooth_probabilities_kalman(probabilities: np.ndarray) -> np.ndarray:
    """
    Applies a Kalman Filter to a time series of probabilities to smooth them.
    """
    if probabilities is None or len(probabilities) == 0:
        return np.array([])

    kf = KalmanFilter(
        transition_matrices=[1],
        observation_matrices=[1],
        initial_state_mean=probabilities[0],
        initial_state_covariance=1,
        transition_covariance=0.01,
        observation_covariance=0.1
    )
    smoothed_states, _ = kf.filter(probabilities)
    return smoothed_states.flatten()

def train_meta_model(meta_dataset: pd.DataFrame) -> CalibratedClassifierCV:
    """
    Trains a calibrated classifier to act as the meta-model.

    This model learns to predict the probability that the primary model's
    signal is correct.

    Args:
        meta_dataset (pd.DataFrame): The dataset generated by `generate_meta_dataset`.

    Returns:
        CalibratedClassifierCV: The trained and calibrated meta-model.
    """
    if meta_dataset.empty:
        raise ValueError("Meta-dataset is empty, cannot train meta-model.")

    # Add our new uncertainty feature to the list
    meta_features_to_use = ['primary_model_probability', 'relative_volume', 'market_regime', 'model_uncertainty']
    
    X_meta = meta_dataset[meta_features_to_use]
    y_meta = meta_dataset['meta_target']

    base_model = LogisticRegression(class_weight='balanced', random_state=42)

    calibrated_meta_model = CalibratedClassifierCV(
        base_model,
        method='isotonic',
        cv=3
    )

    print("Training meta-model...")
    calibrated_meta_model.fit(X_meta, y_meta)
    print("Meta-model training complete.")

    return calibrated_meta_model
